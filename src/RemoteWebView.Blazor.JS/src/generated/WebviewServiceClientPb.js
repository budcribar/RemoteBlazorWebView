"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for webview
 * @enhanceable
 * @public
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientIPCClient = exports.BrowserIPCClient = exports.WebViewIPCClient = void 0;
// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.15.8
// source: webview.proto
/* eslint-disable */
// @ts-nocheck
var grpcWeb = require("grpc-web");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb"); // proto import: "google/protobuf/empty.proto"
var webview_pb = require("./webview_pb"); // proto import: "webview.proto"
var WebViewIPCClient = /** @class */ (function () {
    function WebViewIPCClient(hostname, credentials, options) {
        this.methodDescriptorSendMessage = new grpcWeb.MethodDescriptor('/webview.WebViewIPC/SendMessage', grpcWeb.MethodType.UNARY, webview_pb.SendMessageRequest, webview_pb.SendMessageResponse, function (request) {
            return request.serializeBinary();
        }, webview_pb.SendMessageResponse.deserializeBinary);
        this.methodDescriptorShutdown = new grpcWeb.MethodDescriptor('/webview.WebViewIPC/Shutdown', grpcWeb.MethodType.UNARY, webview_pb.IdMessageRequest, google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        this.methodDescriptorCreateWebView = new grpcWeb.MethodDescriptor('/webview.WebViewIPC/CreateWebView', grpcWeb.MethodType.SERVER_STREAMING, webview_pb.CreateWebViewRequest, webview_pb.WebMessageResponse, function (request) {
            return request.serializeBinary();
        }, webview_pb.WebMessageResponse.deserializeBinary);
        this.methodDescriptorGetIds = new grpcWeb.MethodDescriptor('/webview.WebViewIPC/GetIds', grpcWeb.MethodType.UNARY, google_protobuf_empty_pb.Empty, webview_pb.IdArrayResponse, function (request) {
            return request.serializeBinary();
        }, webview_pb.IdArrayResponse.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname.replace(/\/+$/, '');
        this.credentials_ = credentials;
        this.options_ = options;
    }
    WebViewIPCClient.prototype.sendMessage = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/webview.WebViewIPC/SendMessage', request, metadata || {}, this.methodDescriptorSendMessage, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/webview.WebViewIPC/SendMessage', request, metadata || {}, this.methodDescriptorSendMessage);
    };
    WebViewIPCClient.prototype.shutdown = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/webview.WebViewIPC/Shutdown', request, metadata || {}, this.methodDescriptorShutdown, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/webview.WebViewIPC/Shutdown', request, metadata || {}, this.methodDescriptorShutdown);
    };
    WebViewIPCClient.prototype.createWebView = function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/webview.WebViewIPC/CreateWebView', request, metadata || {}, this.methodDescriptorCreateWebView);
    };
    WebViewIPCClient.prototype.getIds = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/webview.WebViewIPC/GetIds', request, metadata || {}, this.methodDescriptorGetIds, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/webview.WebViewIPC/GetIds', request, metadata || {}, this.methodDescriptorGetIds);
    };
    return WebViewIPCClient;
}());
exports.WebViewIPCClient = WebViewIPCClient;
var BrowserIPCClient = /** @class */ (function () {
    function BrowserIPCClient(hostname, credentials, options) {
        this.methodDescriptorReceiveMessage = new grpcWeb.MethodDescriptor('/webview.BrowserIPC/ReceiveMessage', grpcWeb.MethodType.SERVER_STREAMING, webview_pb.ReceiveMessageRequest, webview_pb.StringRequest, function (request) {
            return request.serializeBinary();
        }, webview_pb.StringRequest.deserializeBinary);
        this.methodDescriptorSendMessage = new grpcWeb.MethodDescriptor('/webview.BrowserIPC/SendMessage', grpcWeb.MethodType.UNARY, webview_pb.SendSequenceMessageRequest, webview_pb.SendMessageResponse, function (request) {
            return request.serializeBinary();
        }, webview_pb.SendMessageResponse.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname.replace(/\/+$/, '');
        this.credentials_ = credentials;
        this.options_ = options;
    }
    BrowserIPCClient.prototype.receiveMessage = function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/webview.BrowserIPC/ReceiveMessage', request, metadata || {}, this.methodDescriptorReceiveMessage);
    };
    BrowserIPCClient.prototype.sendMessage = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/webview.BrowserIPC/SendMessage', request, metadata || {}, this.methodDescriptorSendMessage, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/webview.BrowserIPC/SendMessage', request, metadata || {}, this.methodDescriptorSendMessage);
    };
    return BrowserIPCClient;
}());
exports.BrowserIPCClient = BrowserIPCClient;
var ClientIPCClient = /** @class */ (function () {
    function ClientIPCClient(hostname, credentials, options) {
        this.methodDescriptorGetClients = new grpcWeb.MethodDescriptor('/webview.ClientIPC/GetClients', grpcWeb.MethodType.SERVER_STREAMING, webview_pb.UserMessageRequest, webview_pb.ClientResponseList, function (request) {
            return request.serializeBinary();
        }, webview_pb.ClientResponseList.deserializeBinary);
        this.methodDescriptorGetUserGroups = new grpcWeb.MethodDescriptor('/webview.ClientIPC/GetUserGroups', grpcWeb.MethodType.UNARY, webview_pb.UserRequest, webview_pb.UserResponse, function (request) {
            return request.serializeBinary();
        }, webview_pb.UserResponse.deserializeBinary);
        this.methodDescriptorGetServerStatus = new grpcWeb.MethodDescriptor('/webview.ClientIPC/GetServerStatus', grpcWeb.MethodType.UNARY, google_protobuf_empty_pb.Empty, webview_pb.ServerResponse, function (request) {
            return request.serializeBinary();
        }, webview_pb.ServerResponse.deserializeBinary);
        this.methodDescriptorGetLoggedEvents = new grpcWeb.MethodDescriptor('/webview.ClientIPC/GetLoggedEvents', grpcWeb.MethodType.UNARY, google_protobuf_empty_pb.Empty, webview_pb.LoggedEventResponse, function (request) {
            return request.serializeBinary();
        }, webview_pb.LoggedEventResponse.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname.replace(/\/+$/, '');
        this.credentials_ = credentials;
        this.options_ = options;
    }
    ClientIPCClient.prototype.getClients = function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/webview.ClientIPC/GetClients', request, metadata || {}, this.methodDescriptorGetClients);
    };
    ClientIPCClient.prototype.getUserGroups = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/webview.ClientIPC/GetUserGroups', request, metadata || {}, this.methodDescriptorGetUserGroups, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/webview.ClientIPC/GetUserGroups', request, metadata || {}, this.methodDescriptorGetUserGroups);
    };
    ClientIPCClient.prototype.getServerStatus = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/webview.ClientIPC/GetServerStatus', request, metadata || {}, this.methodDescriptorGetServerStatus, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/webview.ClientIPC/GetServerStatus', request, metadata || {}, this.methodDescriptorGetServerStatus);
    };
    ClientIPCClient.prototype.getLoggedEvents = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/webview.ClientIPC/GetLoggedEvents', request, metadata || {}, this.methodDescriptorGetLoggedEvents, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/webview.ClientIPC/GetLoggedEvents', request, metadata || {}, this.methodDescriptorGetLoggedEvents);
    };
    return ClientIPCClient;
}());
exports.ClientIPCClient = ClientIPCClient;
//# sourceMappingURL=WebviewServiceClientPb.js.map