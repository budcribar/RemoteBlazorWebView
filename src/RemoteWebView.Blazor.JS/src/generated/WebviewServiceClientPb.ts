/**
 * @fileoverview gRPC-Web generated client stub for webview
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.15.8
// source: webview.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as webview_pb from './webview_pb'; // proto import: "webview.proto"


export class WebViewIPCClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendMessage = new grpcWeb.MethodDescriptor(
    '/webview.WebViewIPC/SendMessage',
    grpcWeb.MethodType.UNARY,
    webview_pb.SendMessageRequest,
    webview_pb.SendMessageResponse,
    (request: webview_pb.SendMessageRequest) => {
      return request.serializeBinary();
    },
    webview_pb.SendMessageResponse.deserializeBinary
  );

  sendMessage(
    request: webview_pb.SendMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<webview_pb.SendMessageResponse>;

  sendMessage(
    request: webview_pb.SendMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: webview_pb.SendMessageResponse) => void): grpcWeb.ClientReadableStream<webview_pb.SendMessageResponse>;

  sendMessage(
    request: webview_pb.SendMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: webview_pb.SendMessageResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/webview.WebViewIPC/SendMessage',
        request,
        metadata || {},
        this.methodDescriptorSendMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/webview.WebViewIPC/SendMessage',
    request,
    metadata || {},
    this.methodDescriptorSendMessage);
  }

  methodDescriptorShutdown = new grpcWeb.MethodDescriptor(
    '/webview.WebViewIPC/Shutdown',
    grpcWeb.MethodType.UNARY,
    webview_pb.IdMessageRequest,
    google_protobuf_empty_pb.Empty,
    (request: webview_pb.IdMessageRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  shutdown(
    request: webview_pb.IdMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  shutdown(
    request: webview_pb.IdMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  shutdown(
    request: webview_pb.IdMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/webview.WebViewIPC/Shutdown',
        request,
        metadata || {},
        this.methodDescriptorShutdown,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/webview.WebViewIPC/Shutdown',
    request,
    metadata || {},
    this.methodDescriptorShutdown);
  }

  methodDescriptorCreateWebView = new grpcWeb.MethodDescriptor(
    '/webview.WebViewIPC/CreateWebView',
    grpcWeb.MethodType.SERVER_STREAMING,
    webview_pb.CreateWebViewRequest,
    webview_pb.WebMessageResponse,
    (request: webview_pb.CreateWebViewRequest) => {
      return request.serializeBinary();
    },
    webview_pb.WebMessageResponse.deserializeBinary
  );

  createWebView(
    request: webview_pb.CreateWebViewRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<webview_pb.WebMessageResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/webview.WebViewIPC/CreateWebView',
      request,
      metadata || {},
      this.methodDescriptorCreateWebView);
  }

  methodDescriptorGetIds = new grpcWeb.MethodDescriptor(
    '/webview.WebViewIPC/GetIds',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    webview_pb.IdArrayResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    webview_pb.IdArrayResponse.deserializeBinary
  );

  getIds(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<webview_pb.IdArrayResponse>;

  getIds(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: webview_pb.IdArrayResponse) => void): grpcWeb.ClientReadableStream<webview_pb.IdArrayResponse>;

  getIds(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: webview_pb.IdArrayResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/webview.WebViewIPC/GetIds',
        request,
        metadata || {},
        this.methodDescriptorGetIds,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/webview.WebViewIPC/GetIds',
    request,
    metadata || {},
    this.methodDescriptorGetIds);
  }

}

export class BrowserIPCClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorReceiveMessage = new grpcWeb.MethodDescriptor(
    '/webview.BrowserIPC/ReceiveMessage',
    grpcWeb.MethodType.SERVER_STREAMING,
    webview_pb.ReceiveMessageRequest,
    webview_pb.StringRequest,
    (request: webview_pb.ReceiveMessageRequest) => {
      return request.serializeBinary();
    },
    webview_pb.StringRequest.deserializeBinary
  );

  receiveMessage(
    request: webview_pb.ReceiveMessageRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<webview_pb.StringRequest> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/webview.BrowserIPC/ReceiveMessage',
      request,
      metadata || {},
      this.methodDescriptorReceiveMessage);
  }

  methodDescriptorSendMessage = new grpcWeb.MethodDescriptor(
    '/webview.BrowserIPC/SendMessage',
    grpcWeb.MethodType.UNARY,
    webview_pb.SendSequenceMessageRequest,
    webview_pb.SendMessageResponse,
    (request: webview_pb.SendSequenceMessageRequest) => {
      return request.serializeBinary();
    },
    webview_pb.SendMessageResponse.deserializeBinary
  );

  sendMessage(
    request: webview_pb.SendSequenceMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<webview_pb.SendMessageResponse>;

  sendMessage(
    request: webview_pb.SendSequenceMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: webview_pb.SendMessageResponse) => void): grpcWeb.ClientReadableStream<webview_pb.SendMessageResponse>;

  sendMessage(
    request: webview_pb.SendSequenceMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: webview_pb.SendMessageResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/webview.BrowserIPC/SendMessage',
        request,
        metadata || {},
        this.methodDescriptorSendMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/webview.BrowserIPC/SendMessage',
    request,
    metadata || {},
    this.methodDescriptorSendMessage);
  }

}

export class ClientIPCClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetClients = new grpcWeb.MethodDescriptor(
    '/webview.ClientIPC/GetClients',
    grpcWeb.MethodType.SERVER_STREAMING,
    webview_pb.UserMessageRequest,
    webview_pb.ClientResponseList,
    (request: webview_pb.UserMessageRequest) => {
      return request.serializeBinary();
    },
    webview_pb.ClientResponseList.deserializeBinary
  );

  getClients(
    request: webview_pb.UserMessageRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<webview_pb.ClientResponseList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/webview.ClientIPC/GetClients',
      request,
      metadata || {},
      this.methodDescriptorGetClients);
  }

  methodDescriptorGetUserGroups = new grpcWeb.MethodDescriptor(
    '/webview.ClientIPC/GetUserGroups',
    grpcWeb.MethodType.UNARY,
    webview_pb.UserRequest,
    webview_pb.UserResponse,
    (request: webview_pb.UserRequest) => {
      return request.serializeBinary();
    },
    webview_pb.UserResponse.deserializeBinary
  );

  getUserGroups(
    request: webview_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<webview_pb.UserResponse>;

  getUserGroups(
    request: webview_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: webview_pb.UserResponse) => void): grpcWeb.ClientReadableStream<webview_pb.UserResponse>;

  getUserGroups(
    request: webview_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: webview_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/webview.ClientIPC/GetUserGroups',
        request,
        metadata || {},
        this.methodDescriptorGetUserGroups,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/webview.ClientIPC/GetUserGroups',
    request,
    metadata || {},
    this.methodDescriptorGetUserGroups);
  }

  methodDescriptorGetServerStatus = new grpcWeb.MethodDescriptor(
    '/webview.ClientIPC/GetServerStatus',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    webview_pb.ServerResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    webview_pb.ServerResponse.deserializeBinary
  );

  getServerStatus(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<webview_pb.ServerResponse>;

  getServerStatus(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: webview_pb.ServerResponse) => void): grpcWeb.ClientReadableStream<webview_pb.ServerResponse>;

  getServerStatus(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: webview_pb.ServerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/webview.ClientIPC/GetServerStatus',
        request,
        metadata || {},
        this.methodDescriptorGetServerStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/webview.ClientIPC/GetServerStatus',
    request,
    metadata || {},
    this.methodDescriptorGetServerStatus);
  }

  methodDescriptorGetLoggedEvents = new grpcWeb.MethodDescriptor(
    '/webview.ClientIPC/GetLoggedEvents',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    webview_pb.LoggedEventResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    webview_pb.LoggedEventResponse.deserializeBinary
  );

  getLoggedEvents(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<webview_pb.LoggedEventResponse>;

  getLoggedEvents(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: webview_pb.LoggedEventResponse) => void): grpcWeb.ClientReadableStream<webview_pb.LoggedEventResponse>;

  getLoggedEvents(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: webview_pb.LoggedEventResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/webview.ClientIPC/GetLoggedEvents',
        request,
        metadata || {},
        this.methodDescriptorGetLoggedEvents,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/webview.ClientIPC/GetLoggedEvents',
    request,
    metadata || {},
    this.methodDescriptorGetLoggedEvents);
  }

}

