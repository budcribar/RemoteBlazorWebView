@page "/"
@inject GrpcChannel Channel
@using Grpc.Core;
@using Microsoft.Extensions.Logging
@using System.Threading
@using PeakSWC.RemoteableWebView
@inject ILogger<Index> _logger

<h3>Active Clients</h3>

<ul>
    @if (list != null)
    {
        foreach (var client in list.ClientResponses)
        {
            if (client.State == ClientState.Connected)
            {
                <li> <a href="@client.Url">@client.HostName</a></li>
            }
            else
            {
                <li> @client.HostName (in use)</li>
            }
        }
    }

</ul>
@code {
    private ClientResponseList? list;
    private CancellationTokenSource tokenSource = new CancellationTokenSource();
    protected override async Task OnInitializedAsync()
    {
        var client = new ClientIPC.ClientIPCClient(Channel);

        var response = client.GetClients(new());
        var stream = response.ResponseStream;

        await foreach (var clientResponseList in response.ResponseStream.ReadAllAsync())
        {
            list = clientResponseList;

            list.ClientResponses.ToList().ForEach(x => _logger.LogInformation($"Client Id:{x.Id} State:{x.State}"));

            await InvokeAsync(StateHasChanged);

        }

        await base.OnInitializedAsync();
    }

}