@page "/"
@inject GrpcChannel Channel
@using Grpc.Core;
@using Microsoft.Extensions.Logging
@using PeakSWC.RemoteableWebView
@using Microsoft.AspNetCore.Authorization
@inject ILogger<Index> _logger
@attribute [Authorize]
<h3>Connected Clients</h3>

@if (list == null)
{
    <h4>Connecting to Remote WebView Server...</h4>
    if (Message != null)
    {
        <div class="error">@Message</div>
    }
    
}
else
{
    <ul>
    @foreach (var client in list.ClientResponses)
    {
        @if (client.State == ClientState.Connected)
        {
            <li> <a href="@client.Url">@client.HostName</a></li>
        }
        else
        {
            <li> @client.HostName (in use)</li>
        }
    }
    </ul>
}


@code {
    private ClientResponseList? list;
    private string? Message;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var client = new ClientIPC.ClientIPCClient(Channel);

            var response = client.GetClients(new());
            var stream = response.ResponseStream;

            await foreach (var clientResponseList in response.ResponseStream.ReadAllAsync())
            {
                list = clientResponseList;

                list.ClientResponses.ToList().ForEach(x => _logger.LogInformation($"Client Id:{x.Id} State:{x.State}"));

                await InvokeAsync(StateHasChanged);

            }
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }

    }

}