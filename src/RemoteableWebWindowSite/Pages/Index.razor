@page "/"
@inject GrpcChannel Channel
@using Grpc.Core;
@using Microsoft.Extensions.Logging
@using PeakSWC.RemoteableWebView
@inject ILogger<Index> _logger

<h3>Connected Clients</h3>

@*<AuthorizeView>
    <Authorized>*@
        <ul>
            @if (list != null)
            {
                foreach (var client in list.ClientResponses)
                {
                    if (client.State == ClientState.Connected)
                    {
                        <li> <a href="@client.Url">@client.HostName</a></li>
                    }
                    else
                    {
                        <li> @client.HostName (in use)</li>
                    }
                }
            }
        </ul>
  @*  </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>*@


@code {
    private ClientResponseList? list;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var client = new ClientIPC.ClientIPCClient(Channel);

        var response = client.GetClients(new());
        var stream = response.ResponseStream;

        await foreach (var clientResponseList in response.ResponseStream.ReadAllAsync())
        {
            list = clientResponseList;

            list.ClientResponses.ToList().ForEach(x => _logger.LogInformation($"Client Id:{x.Id} State:{x.State}"));

            await InvokeAsync(StateHasChanged);

        }
    }

}